# Load all your packages here:
library(tidyverse)
library(GGally)
library(rpart)
# Set default behavior for all code chunks here:
knitr::opts_chunk$set(
echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 16/2, fig.height = 9/2
)
# Set seed value of random number generator here. This is in order to get
# "replicable" randomness, so that any results based on random sampling or
# resampling are replicable everytime you knit this file. Why use a seed value
# of 76? For no other reason than 76 is one of my favorite numbers:
# https://www.youtube.com/watch?v=xjJ7FheCkCU
set.seed(76)
training <- read_csv("data/train.csv")
test <- read_csv("data/test.csv")
sample_submission <- read_csv("data/sample_submission.csv")
hist(color$training)
hist(training$color)
bar(training$color)
ggplot(data = training,
aes(x = color)) +
geom_bar()
ggplot(data = training,
aes(x = color)) +
geom_bar()
ggplot(data = training,
aes(x = type)) +
geom_bar()
# Load all your packages here:
library(tidyverse)
library(GGally)
library(rpart)
# Set default behavior for all code chunks here:
knitr::opts_chunk$set(
echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 16/2, fig.height = 9/2
)
# Set seed value of random number generator here. This is in order to get
# "replicable" randomness, so that any results based on random sampling or
# resampling are replicable everytime you knit this file. Why use a seed value
# of 76? For no other reason than 76 is one of my favorite numbers:
# https://www.youtube.com/watch?v=xjJ7FheCkCU
set.seed(76)
ggpairs(training, columns = c("bone_length", "rotting_flesh", "hair_length", "has_soul")
ggpairs(training, columns = c("bone_length", "rotting_flesh", "hair_length", "has_soul"))
ggpairs(training, columns = c("bone_length", "rotting_flesh", "hair_length", "has_soul"))
ggpairs(training, columns = c("bone_length", "rotting_flesh", "hair_length", "has_soul"))
View(training)
ggplot(data = training,
aes(x = hair_length, y = type)) +
geom_point(color = type)
ggplot(data = training,
aes(x = hair_length, y = type)) +
geom_point(aes(color = type))
ggplot(data = training,
aes(x = hair_length, y = type)) +
geom_boxplot()
ggplot(data = training,
aes(x = type, y = hair_color)) +
geom_boxplot()
ggplot(data = training,
aes(x = type, y = hair_length)) +
geom_boxplot()
# Load all your packages here:
library(tidyverse)
library(GGally)
library(rpart)
# Set default behavior for all code chunks here:
knitr::opts_chunk$set(
echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 16/2, fig.height = 9/2
)
# Set seed value of random number generator here. This is in order to get
# "replicable" randomness, so that any results based on random sampling or
# resampling are replicable everytime you knit this file. Why use a seed value
# of 76? For no other reason than 76 is one of my favorite numbers:
# https://www.youtube.com/watch?v=xjJ7FheCkCU
set.seed(76)
training <- read_csv("data/train.csv")
test <- read_csv("data/test.csv")
sample_submission <- read_csv("data/sample_submission.csv")
ggplot(data = training,
aes(x = color)) +
geom_bar()
ggplot(data = training,
aes(x = type)) +
geom_bar()
ggpairs(training, columns = c("bone_length", "rotting_flesh", "hair_length", "has_soul"))
ggplot(data = training,
aes(x = type, y = hair_length)) +
geom_boxplot()
View(training)
model_1_formula <- as.formula(type~bone_length + rotting_flesh + hair_length + has_soul)
tree_parameter <- rpart.control(maxdepth = 5)
model_1_CART <- rpart(model_1_formula, data = training, control = tree_parameter)
model_1_formula <- as.formula(type~bone_length + rotting_flesh + hair_length + has_soul)
tree_parameter <- rpart.control(maxdepth = 5)
model_1_CART <- rpart(model_1_formula, data = training, control = tree_parameter)
plot(model_1_CART)
text(model_1_CART, use.n = TRUE)
title("Predicting monster type with bone length, rotting flesh, hair length and soul")
box()
View(training)
View(model_1_CART)
View(sample_submission)
p_hat_matrix_train <- model_1_CART %>%
predict(type = "prob", newdata = training) %>%
as_tibble()
View(p_hat_matrix_train)
p_hat_matrix_train <- model_1_CART %>%
predict(type = "class", newdata = training) %>%
as_tibble()
p_hat_matrix_train <- model_1_CART %>%
predict(type = "class", newdata = training) %>%
as_tibble()
p_hat_matrix_train <- model_1_CART %>%
predict(type = "class", newdata = training) %>%
enframe()
View(p_hat_matrix_train)
View(training)
training <- training %>%
mutate(type_hat = p_hat_matrix_train$value)
View(training)
sum(training$type == training$type_hat)
sum(training$type == training$type_hat) / nrow(training)
accuracy = sum(training$type == training$type_hat) / nrow(training)
accuracy
alpha_df <- tibble(
alpha = seq(from = 0, to = 0.05, length = 100),
accuracy = 0
)
View(alpha_df)
?rpart.control
